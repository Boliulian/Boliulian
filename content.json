{"meta":{"title":"榴莲的数字花园","subtitle":"灵魂会说话","description":"","author":"Boliulian","url":"https://boliulian.github.io/Boliulian","root":"/Boliulian/"},"pages":[{"title":"","date":"2024-07-04T09:48:35.000Z","updated":"2024-07-04T10:11:01.213Z","comments":true,"path":"about/index.html","permalink":"https://boliulian.github.io/Boliulian/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2024-07-04T09:51:46.000Z","updated":"2024-07-04T09:55:59.374Z","comments":true,"path":"tags/index.html","permalink":"https://boliulian.github.io/Boliulian/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2024-07-04T09:51:57.000Z","updated":"2024-07-04T09:58:31.362Z","comments":true,"path":"categories/index.html","permalink":"https://boliulian.github.io/Boliulian/categories/index.html","excerpt":"","text":""},{"title":"愿望清单","date":"2024-07-05T14:43:08.000Z","updated":"2024-07-06T09:35:41.286Z","comments":true,"path":"wishes/index.html","permalink":"https://boliulian.github.io/Boliulian/wishes/index.html","excerpt":"","text":"完成一个可分享的数字花园2024-07-01：hexo+github部署成功 画完一本速写本 学会延迟满足（信息流点收藏再集中看） 告别排骨胸 刷力扣20题 用c++开发一个完整的小项目2024-07-05：开始做力扣 语言逻辑分析和比较 文献速读视觉笔记SOP 用NAS私有云搭建本地数据库（硬件、软件） 做出一顿饭 考驾照 有自己的收入 自由职业者（自由职业指的是产出不确定） 跑通一个生意"}],"posts":[{"title":"力扣题体验","slug":"力扣题体验","date":"2024-07-05T10:54:46.000Z","updated":"2024-07-07T15:23:49.215Z","comments":true,"path":"2024/07/05/力扣题体验/","permalink":"https://boliulian.github.io/Boliulian/2024/07/05/%E5%8A%9B%E6%89%A3%E9%A2%98%E4%BD%93%E9%AA%8C/","excerpt":"https://leetcode.cn/ 整数反转（2024.07.07）道理上不难，难点在要考虑int32溢出的问题可处理的数字边界是$-2^{31}$到$2^{31}-1$所以得到的数字要判断会不会溢出（直接用边界值去判断","text":"https://leetcode.cn/ 整数反转（2024.07.07）道理上不难，难点在要考虑int32溢出的问题可处理的数字边界是$-2^{31}$到$2^{31}-1$所以得到的数字要判断会不会溢出（直接用边界值去判断 我的解法：先用一个数组把数字都存了，再计算结果 1234567891011121314151617181920212223242526class Solution &#123;public: int reverse(int x) &#123; int tmp=x,p; vector&lt;int&gt; num; int sign=1; if (x&lt;0 &amp;&amp; x&gt;-2147483647) sign=-1;tmp=tmp*sign; if (x&lt;-2147483647) tmp=0; while (tmp&gt;0)&#123; p=tmp%10; // 最后一位数字 num.push_back(p); tmp=tmp/10; &#125; int result=0, c=num.size(), check, tmpsum; for (int j=0;j&lt;num.size();j++)&#123; if (result+num[j]*pow(10,c-j-1) &lt; 2147483647-1) result=result+num[j]*pow(10,c-j-1); else &#123;result=0;break;&#125; &#125; return result*sign; &#125;&#125;; 官方解答：INT_MIN和INT_MAX是预设值最后计算的数字如果小于INT_MIN/10，则会溢出 1234567891011121314class Solution &#123;public: int reverse(int x) &#123; int p,ans=0; while (x)&#123; p=x%10; // 最后一位数字 if (ans &lt; INT_MIN / 10 || ans &gt; INT_MAX/10) return 0; ans=x/10+p; x=x/10; &#125; return ans; &#125;&#125;; 无重复的最长字符串（2024.07.06）滑动窗口，左下标i，右下标j（界限为右边界），提取窗口内子串用str.substr(i,j-i)查找字符串中的某字符用str.find （找不到返回-1，一开始被gpt骗了，说是返回npos发现字符重复后，清除重复字符以前的所有字符注意字符串string和字符char不是同一种格式 1234567891011121314151617181920class Solution &#123;public: int lengthOfLongestSubstring(string s) &#123; int i=0; int result=0; string str; for (int j=0; j&lt; s.length();j++)&#123; str=s.substr(i,j-i); int pos=str.find(s[j]); if (pos != -1)&#123; str.erase(0,pos+1); i=i+pos+1; &#125; str +=s[j]; result=max(result,j-i+1); &#125; return result; &#125;&#125;; 好不喜欢字符串…就是一种绝对能弄出来但不知道怎么更快的感觉我还是喜欢不知道能不能弄出来，想大于做的任务 两数相加（2024.07.06）1234567891011#include &lt;iostream&gt;using namespace std;// 单向链表定义 struct ListNode &#123; int val; ListNode *next; ListNode() : val(0), next(nullptr) &#123;&#125; ListNode(int x) : val(x), next(nullptr) &#123;&#125; ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;&#125;; ListNode是结构体对象，节点存储的是指向下一节点的指针和节点的值。l1,l2分别是指向链表头结点的指针所以，头节点的值是l1-&gt;val，指向下一个节点的指针是l1-&gt;next引入滑动指针遍历整个链表，当前位数的值相加，超过十进位。滑动指针运算前需要判断非空! 123456789101112131415161718192021222324252627282930class Solution &#123;public: ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) &#123; ListNode* p=l1; ListNode* q=l2; ListNode* head=new ListNode(0); ListNode* current=head; ListNode* l3; int N1=0,N2=0,n1=0,n2=0,extra=0,x,y; while (p!=nullptr || q!=nullptr)&#123; if (p!=nullptr) x=p-&gt;val; else x=0; if (q!=nullptr) y=q-&gt;val; else y=0; int sum=x+y+extra; extra=sum/10; current-&gt;next = new ListNode(sum%10); current=current-&gt;next; if (p != nullptr) p = p-&gt;next; if (q != nullptr) q = q-&gt;next; &#125; if (extra &gt; 0) &#123; current-&gt;next = new ListNode(extra); &#125; return l3=head-&gt;next; &#125; &#125;; 两数之和（2024.07.05）我的答案，暴力循环： 123456789101112131415class Solution &#123;public: vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123; int n = nums.size(); for (int i = 0; i &lt; n; ++i) &#123; for (int j = i + 1; j &lt; n; ++j) &#123; if (nums[i] + nums[j] == target) &#123; return &#123;i, j&#125;; &#125; &#125; &#125; return &#123;&#125;; &#125;&#125;; vector&lt;int&gt; 动态数组++i是前置递增，i++是后置递增 官方答案，用到概念哈希表(hashtable)：哈希表是一种数据结构 123456789101112131415class Solution &#123;public: vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) &#123; unordered_map&lt;int, int&gt; hashtable; for (int i = 0; i &lt; nums.size(); ++i) &#123; auto it = hashtable.find(target - nums[i]); if (it != hashtable.end()) &#123; return &#123;it-&gt;second, i&#125;; &#125; hashtable[nums[i]] = i; &#125; return &#123;&#125;; &#125;&#125;; it-&gt;first是健，这里是数组的元素it-&gt;second是值，这是是数组的索引。 遇到的问题：运行代码时通过列表初始化vector出错设置vs code支持c++11改command adapter设置https://www.jianshu.com/p/e1bc046edecc改code-runner配置https://blog.csdn.net/Littlelumos/article/details/130437532 可能是 mac 芯片&#x2F;系统 或者 code runner 参数问题，所以先找到 code runner 插件的配置设置，找到 cpp 文件的启动参数，下面省略： 1234567&quot;code-runner.executorMap&quot;: &#123; &quot;javascript&quot;: &quot;node&quot;, &quot;java&quot;: &quot;cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt&quot;, &quot;c&quot;: &quot;cd $dir &amp;&amp; gcc $fileName -o -std=c++11 -g $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;, &quot;zig&quot;: &quot;zig run&quot;, &quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;, 将其中的 cpp (不是 c) 改成这样，加入 c++11 支持就可以了： 123&quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ $fileName -g -Wall -std=c++11 -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;,","categories":[],"tags":[{"name":"cpp","slug":"cpp","permalink":"https://boliulian.github.io/Boliulian/tags/cpp/"}]},{"title":"Hexo+github部署个人博客的流程","slug":"Hexo+github部署个人博客的流程","date":"2024-07-04T14:16:04.000Z","updated":"2024-07-04T15:11:23.000Z","comments":true,"path":"2024/07/04/Hexo+github部署个人博客的流程/","permalink":"https://boliulian.github.io/Boliulian/2024/07/04/Hexo+github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%B5%81%E7%A8%8B/","excerpt":"1.下载node.js和npmnode.js包括了npm 1brew install node","text":"1.下载node.js和npmnode.js包括了npm 1brew install node 2.下载hexo1npm install -g hexo-cli 3.初始化blog123hexo init myblogcd myblognpm install 4.安装主题4.1 下载next1git clone https://github.com/iissnan/hexo-theme-next themes/next 4.2 配置_config.yml1theme: next 5.外部部署5.1 github准备github新建仓库，并将主分支设置为main 5.2 本地准备安装插件hexo-deployer-git 1npm install hexo-deployer-git --save 生成ssh key 123git config --global user.name &quot; &quot;git config --global user.email &quot; &quot;ssh-keygen -t rsa -C &quot; &quot; 将id_rsa.pub文件中的内容复制到仓库设置中，生成ssh key 5.3 两者连接修改\\_config.yml文件中的deploy和url 123456url: github page地址deploy: type: git repo: 仓库的ssh地址（http地址连不上 branch: main 6.提交内容123hexo ghexo shexo d","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://boliulian.github.io/Boliulian/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://boliulian.github.io/Boliulian/tags/github/"}]},{"title":"自欺欺人第一名","slug":"自欺欺人第一名","date":"2024-07-04T10:33:46.000Z","updated":"2024-07-07T07:21:44.000Z","comments":true,"path":"2024/07/04/自欺欺人第一名/","permalink":"https://boliulian.github.io/Boliulian/2024/07/04/%E8%87%AA%E6%AC%BA%E6%AC%BA%E4%BA%BA%E7%AC%AC%E4%B8%80%E5%90%8D/","excerpt":"比惨可耻但有用：","text":"比惨可耻但有用： ① 成果很好但毕业了半年才找到博后的点击比惨② 6月毕业还没工作的，以及去年6月毕业还没工作的 点击比惨③ 专业不对口也不是没可能转行的点击比惨④24届没找到工作的集合点击比惨","categories":[],"tags":[]},{"title":"youtube-dl扒档方法","slug":"youtube-dl扒档方法","date":"2024-07-04T10:16:04.000Z","updated":"2024-07-07T15:13:56.650Z","comments":true,"path":"2024/07/04/youtube-dl扒档方法/","permalink":"https://boliulian.github.io/Boliulian/2024/07/04/youtube-dl%E6%89%92%E6%A1%A3%E6%96%B9%E6%B3%95/","excerpt":"好人提供的扒档教程，原链接：https://weibo.com/ttarticle/p/show?id=2309404603148240027963 方法是youtube-dl+ffmpeg","text":"好人提供的扒档教程，原链接：https://weibo.com/ttarticle/p/show?id=2309404603148240027963 方法是youtube-dl+ffmpeg youtube-dl从github找，用homebrew安装；ffmpeg是个可执行文件，从官网下 （我把ffmpeg放到usr&#x2F;local&#x2F;bin了 然后从原视频连接获取真实url，具体方法： 在Tver或者Gyao点开一个视频，右键-审查元素（或直接Ctrl+Shift+I，如果发现不让审查元素，可以先点开随便一个别的网页，提前点开审查元素，然后把tver的链接粘贴即可） Ctrl+f搜data-account，找到这个站点的数字 Ctrl+f搜data-video-id找到这个视频专属的数字 然后替换到底下这个链接里，即可http://players.brightcove.net/(data-account)/default_default/index.html?videoId=(data-video-id) 例： 123456789youtube-dl -f bestvideo+bestaudio http://players.brightcove.net/4394098882001/default_default/index.html\\?videoId\\=\\6356122004112神业youtube-dl -f bestvideo+bestaudio http://players.brightcove.net/4031511847001/default_default/index.html\\?videoId\\=\\6356257443112新钥匙youtube-dl -f bestvideo+bestaudio http://players.brightcove.net/6191645753001/default_default/index.html\\?videoId\\=\\6356789936112","categories":[],"tags":[]},{"title":"精神就存放在这里","slug":"精神就存放在这里","date":"2024-07-03T11:13:30.000Z","updated":"2024-07-04T14:44:38.304Z","comments":true,"path":"2024/07/03/精神就存放在这里/","permalink":"https://boliulian.github.io/Boliulian/2024/07/03/%E7%B2%BE%E7%A5%9E%E5%B0%B1%E5%AD%98%E6%94%BE%E5%9C%A8%E8%BF%99%E9%87%8C/","excerpt":"只要结果，不问过程。原来不仅是读博，我的人生也一直是这样被隐形要求的，只不过时间尺度拉得太长，到今天交不出成果了才意识到。","text":"只要结果，不问过程。原来不仅是读博，我的人生也一直是这样被隐形要求的，只不过时间尺度拉得太长，到今天交不出成果了才意识到。 别谈什么哲学就是求真了，这个现实世界没有真的东西，真只存在于精神里，是不可说的东西。哲学是自己和世界的关系，也不是可以说的东西。从今天起，闭口不谈。 28岁了才明白并没有无条件的爱。 回顾人生犯的错误，大概最主要一条就是在不正确的年龄拥有了不属于自己阶层的价值观。 你没有时间和资格悲伤，现在需要做的是纠正以前的错误，晚了也不晚。不能说晚，承认晚了就彻底玩完了。 其实是隐隐预料到会有这么一天的，但总抱有一丝侥幸，觉得我是不是可以晚一点，再晚一点，或者不去被同化。拖到现在已经是极限了。这一年来也出现了很多征兆，比如ldh出现的问题，入坑了お笑い，和高中同学的问题，和课题组的问题，和奶奶和姑姑的问题，还有室友说的你会离开这里的。 长出精神是原罪。我突然同情起了复旦那位天龙人，并没有可比性，只是说现实的人不能有精神。精神在心中，不在语言，不在行为。精神不死，灵魂不死，肉身也可以不死。 作为不死的证明，今后精神就存放在这里。这个地方大概就是为了这一天准备的。","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"cpp","slug":"cpp","permalink":"https://boliulian.github.io/Boliulian/tags/cpp/"},{"name":"hexo","slug":"hexo","permalink":"https://boliulian.github.io/Boliulian/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://boliulian.github.io/Boliulian/tags/github/"}]}