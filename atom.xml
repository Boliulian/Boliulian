<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>榴莲的数字花园</title>
  
  <subtitle>观察-&gt;理解-&gt;参与</subtitle>
  <link href="https://boliulian.github.io/Boliulian/atom.xml" rel="self"/>
  
  <link href="https://boliulian.github.io/Boliulian/"/>
  <updated>2024-07-14T05:16:57.175Z</updated>
  <id>https://boliulian.github.io/Boliulian/</id>
  
  <author>
    <name>Boliulian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo配置记录</title>
    <link href="https://boliulian.github.io/Boliulian/2024/07/12/Hexo%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <id>https://boliulian.github.io/Boliulian/2024/07/12/Hexo%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</id>
    <published>2024-07-12T09:22:04.000Z</published>
    <updated>2024-07-14T05:16:57.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="渲染latex公式"><a href="#渲染latex公式" class="headerlink" title="渲染latex公式"></a>渲染latex公式</h2><p>next的config文件里，有<code>mathjax</code>属性，改成true，然后在需要latex渲染的页面前加上<code>mathjax:true</code></p><span id="more"></span>  <h2 id="页面文章部分显示"><a href="#页面文章部分显示" class="headerlink" title="页面文章部分显示"></a>页面文章部分显示</h2><p>在需要开始隐藏的段落前加上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;   </span><br></pre></td></tr></table></figure><h2 id="解决静态页面和部署显示不一致的问题"><a href="#解决静态页面和部署显示不一致的问题" class="headerlink" title="解决静态页面和部署显示不一致的问题"></a>解决静态页面和部署显示不一致的问题</h2><p>先<code>hexo clean</code> 清除缓存，再发布</p><h2 id="部分文章加密"><a href="#部分文章加密" class="headerlink" title="部分文章加密"></a>部分文章加密</h2><p>安装插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hero-blog-encrypt</span><br></pre></td></tr></table></figure><p>配置文件添加字段：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encrypt:</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>需要加密的文档属性添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password:xxx</span><br></pre></td></tr></table></figure><h2 id="文章搜索"><a href="#文章搜索" class="headerlink" title="文章搜索"></a>文章搜索</h2><p>需要安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>然后更改local_search为true</p><h2 id="访客统计"><a href="#访客统计" class="headerlink" title="访客统计"></a>访客统计</h2><p>更改busuanzi_count为true</p><p>可以参考知乎上的一个next配置过程<br><a href="https://zhuanlan.zhihu.com/p/129644138">https://zhuanlan.zhihu.com/p/129644138</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;渲染latex公式&quot;&gt;&lt;a href=&quot;#渲染latex公式&quot; class=&quot;headerlink&quot; title=&quot;渲染latex公式&quot;&gt;&lt;/a&gt;渲染latex公式&lt;/h2&gt;&lt;p&gt;next的config文件里，有&lt;code&gt;mathjax&lt;/code&gt;属性，改成true，然后在需要latex渲染的页面前加上&lt;code&gt;mathjax:true&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="https://boliulian.github.io/Boliulian/tags/hexo/"/>
    
    <category term="github" scheme="https://boliulian.github.io/Boliulian/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>觉醒后的内心独白</title>
    <link href="https://boliulian.github.io/Boliulian/2024/07/12/%E8%A7%89%E9%86%92%E5%90%8E%E7%9A%84%E5%86%85%E5%BF%83%E7%8B%AC%E7%99%BD/"/>
    <id>https://boliulian.github.io/Boliulian/2024/07/12/%E8%A7%89%E9%86%92%E5%90%8E%E7%9A%84%E5%86%85%E5%BF%83%E7%8B%AC%E7%99%BD/</id>
    <published>2024-07-12T03:11:02.000Z</published>
    <updated>2024-07-14T05:16:57.174Z</updated>
    
    <content type="html"><![CDATA[<p>发现自己读错了专业只是个促进思考的契机，这个过程从二十四岁开始持续至今。因为在此之前，人生路径毫无曲折。而思考的大致结果是，我发现自己缺乏主观意识，缺乏这个年龄对世界应有的感知和应变，从而产生了巨大的恐惧和懊悔。尤其是近一年，伴随着毕业将近，这种恐惧和焦虑被放大了，原因也逐渐清晰了，它与职业选择无关，而是几乎全部来自个人成长的迷茫。</p><span id="more"></span>   <p>认知指对世界的客观运行逻辑理解，认知完成差不多是在二十四五岁，对客观世界的整体构造有了一个基本的认识，但细节上还在修修补补。我当时很开心，我觉得我发现了世界的真理，指正确的世界观和方法论，我把我发现的写了下来，写了一万多字，这种开悟可能是很多人不曾有的。这种认识让我有点自负，我觉得我果然还是聪明的。</p><p>但我还是不知道我该怎么做，我意识到是价值观的问题，因为价值观规定了好和坏，好和坏给人带来快乐与痛苦，快乐和痛苦是一切行动的根本动力。但这几年我越来越不明白什么是好的事情。小的时候是理想主义的，可能跟看漫画有关系，但世界观完善后，理想主义自动破灭了。我意识到我对真实的世界更感兴趣，而虚幻的世界会阻碍这种认识，所以二次元也不怎么玩了。可是在现实的框架下，别人都追求的发文章评教职我也没有兴趣，我觉得还是因为我对自己做的事情没有认同感，或者说我没办法跳过自我认同直接去追求利益。但因为现在的价值观理智上是现实主义在主导，我努力说服自己跳过自我认同只看利益，所以过程中多次纠结反悔，但最后还是失败了。</p><p>我花了很多时间思考这个专业存在的问题是什么，为什么会产生反感。在网上搜“如何才能构成一个学科”的问题时，我看到了科学技术史这个专业，这也是那段时间会提起它的原因。因为是先有疑问，主动寻求解答的过程中找到的，心里感觉不一样，所以才说出来的。这个专业的问题就是它根本构不成一个专业，因此我永远无法获得自我认同，这种认识让人产生绝望感。另外，我之所以反感这个专业的虚假，不在于真假本身，而是假导致的逻辑上的无秩序，所以接触它的每一个瞬间都觉得头大，满脑子红灯。技术上没有规则也没有门槛，构不成壁垒，没有钻研空间。但是没有逻辑又没有技术的人接受起来很容易，做起来也容易，他们会比我更如鱼得水。我是觉得自己没有优势，甚至优势全都变成了劣势，如此一来我就没有任何优势了。我既没有优势，又没有认同，而别人都有，加起来就是反感了。</p><p>我想改变，但是缺乏目标，也缺乏勇气。更让我动摇的是，我意识到目标和勇气的重要性远远大于智慧。我发现好像从来没有过明确的目标，都是能做到什么才去做什么，从来没有想过去争取和努力，或许也是因为对外界一无所知，不知道如何争取和努力。也就是因为单纯的聪明，不怎么努力也能拿到分，所以才能在学校这个单一评价体系的系统里一直被推着走。在正确的世界观和方法论形成以前，我甚至认为努力是无用的，天赋决定一切，做不到是因为没有对应的基因。目标导向，刻意练习都是这两年才学明白的词，所以我很想有个目标，做一件事情，想把学到的东西运用到这个目标的实现上。</p><p>我又意识到，在个人成长中，目标来源于看得见摸得着的体验，就像我小时候憧憬在网络上有名的插画家，憧憬他们在线下开画展，憧憬他们将作品制作商品售卖。而在现实世界中，我没有过相应的体验，甚至连和外界接触的体验都很少。二十七岁，处事能力还像高中生，出门在外也被当成学生看待，我是不愿意的。也是体会到这种不愿意以后才意识到，规划和实践能力太差。这种意识过去一直是有的，但是模糊的，反映到心理上就是缺乏掌控感，会做的事不自信，不会做的不敢做。规划和实践以及语言，是在时间维度上的输出，而我一直以来的注意力只放在空间维度上，比如图片和文字。究其原因可能我从小就是一个时间很富裕的人，也没有遇到过任何一个需要短时间内应对的场景，因此疏忽了这一点训练。</p><p>目标，还是在价值观体系下的一种主观判断，是感受和情感的产物。但是我从感受上，因为缺乏体验，和世界没有建立正确的联系，但之前没有这种意识，只是觉得很多事情和我无关，而且早先把这种漠然理解为性格的结果。我有认知，但没有感知。认识到“缺乏感知”就是这一年的事情，凝练成语言是这几天的事情。直到凝练成语言，才觉得是想清楚了。所以我大多时候我不做评价，少言寡语，一方面是想回避冲突，另一方面是因为真的没有想法，没有想法是因为没有自我，没有自我指的是缺乏感受-反馈能力。二十岁以前是有的，但是来自于对周围人的模仿，心里也清楚不是自己的想法。我一直在观察外部世界，但没考虑过自己和世界是什么关系。我只能看到事物的客观性，而形不成主观认识，觉得无所谓，最后导致行动上没有方向，也就不敢行动。先客观，再主观，这可能和很多人的成长过程是反的，所以很难被发现和理解。</p><p>这种意识清晰后在内心引起的是巨大的恐惧和懊悔，自己虚度了很多光阴，错过了很多机会。我有改变的心，但是需要勇气，需要时间。这一切的动机是我想做事情，尽管这个目标很不清晰。正因为我视时间为第一重要的东西，所以更加需要理解和运用它。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;发现自己读错了专业只是个促进思考的契机，这个过程从二十四岁开始持续至今。因为在此之前，人生路径毫无曲折。而思考的大致结果是，我发现自己缺乏主观意识，缺乏这个年龄对世界应有的感知和应变，从而产生了巨大的恐惧和懊悔。尤其是近一年，伴随着毕业将近，这种恐惧和焦虑被放大了，原因也逐渐清晰了，它与职业选择无关，而是几乎全部来自个人成长的迷茫。&lt;/p&gt;</summary>
    
    
    
    
    <category term="灵魂会说话" scheme="https://boliulian.github.io/Boliulian/tags/%E7%81%B5%E9%AD%82%E4%BC%9A%E8%AF%B4%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>力扣题体验</title>
    <link href="https://boliulian.github.io/Boliulian/2024/07/05/%E5%8A%9B%E6%89%A3%E9%A2%98%E4%BD%93%E9%AA%8C/"/>
    <id>https://boliulian.github.io/Boliulian/2024/07/05/%E5%8A%9B%E6%89%A3%E9%A2%98%E4%BD%93%E9%AA%8C/</id>
    <published>2024-07-05T10:54:46.000Z</published>
    <updated>2024-07-14T05:16:57.174Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/">https://leetcode.cn/</a></p><h2 id="回文数（2024-07-12）"><a href="#回文数（2024-07-12）" class="headerlink" title="回文数（2024.07.12）"></a>回文数（2024.07.12）</h2><p>我想的笨办法，数字转成字符串，然后和反转后的字符串比较，都用现成的函数。</p><span id="more"></span>   <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p;</span><br><span class="line">        string s, v;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &lt; INT_MIN || x &gt; INT_MAX)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> &amp;&amp; x &gt;= INT_MIN) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            p = x % <span class="number">10</span>;</span><br><span class="line">            s.<span class="built_in">push_back</span>(<span class="string">&#x27;0&#x27;</span> + p);</span><br><span class="line">            x = x / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// s = to_string(x) 即可</span></span><br><span class="line">        v = s;</span><br><span class="line">        <span class="built_in">reverse</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">if</span> (s == v)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>双指针法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一中转化成string,双指针匹配是否对称</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        string s = <span class="built_in">to_string</span>(x);</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[l] == s[r]) ++l, --r;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Z字形变换（2024-07-09）"><a href="#Z字形变换（2024-07-09）" class="headerlink" title="Z字形变换（2024.07.09）"></a>Z字形变换（2024.07.09）</h2><p>思路一开始就错了，试图找行和列的关系，但其实只需要考虑行一个维度就行了。<br>1.matrix[i]+&#x3D;c;<br>2.i +&#x3D;flag;<br>3.flag&#x3D;-flag;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">convert</span><span class="params">(string s, <span class="type">int</span> numRows)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">matrix</span><span class="params">(numRows)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (numRows == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> s; <span class="comment">// 特殊情况处理</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>; <span class="comment">// 当前行</span></span><br><span class="line">        <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; s.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            matrix[i] += s[count]; <span class="comment">// 在当前行添加字符</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || i == numRows - <span class="number">1</span>)</span><br><span class="line">            &#123; <span class="comment">// 到达顶行或底行时改变方向</span></span><br><span class="line">                flag = -flag;</span><br><span class="line">            &#125;</span><br><span class="line">            i += flag <span class="comment">// 根据方向调整行索引</span></span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        string ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">const</span> string &amp;row : matrix)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += row;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="整数反转（2024-07-07）"><a href="#整数反转（2024-07-07）" class="headerlink" title="整数反转（2024.07.07）"></a>整数反转（2024.07.07）</h2><p>道理上不难，难点在要考虑int32溢出的问题<br>可处理的数字边界是$-2^{31}$到$2^{31}-1$<br>所以得到的数字要判断会不会溢出（直接用边界值去判断</p><p>我的解法：<br>先用一个数组把数字都存了，再计算结果</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> tmp=x,p;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; num;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sign=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span> &amp;&amp; x&gt;<span class="number">-2147483647</span>) sign=<span class="number">-1</span>;tmp=tmp*sign;</span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">-2147483647</span>) tmp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (tmp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        p=tmp%<span class="number">10</span>; <span class="comment">// 最后一位数字</span></span><br><span class="line">        num.<span class="built_in">push_back</span>(p);</span><br><span class="line">        tmp=tmp/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> result=<span class="number">0</span>, c=num.<span class="built_in">size</span>(), check, tmpsum;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;num.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (result+num[j]*<span class="built_in">pow</span>(<span class="number">10</span>,c-j<span class="number">-1</span>) &lt; <span class="number">2147483647</span><span class="number">-1</span>) result=result+num[j]*<span class="built_in">pow</span>(<span class="number">10</span>,c-j<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">else</span> &#123;result=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result*sign;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>官方解答：<br><code>INT_MIN</code>和<code>INT_MAX</code>是预设值<br>最后计算的数字如果小于<code>INT_MIN/10</code>，则会溢出</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reverse</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x)&#123;</span><br><span class="line">        p=x%<span class="number">10</span>; <span class="comment">// 最后一位数字</span></span><br><span class="line">        <span class="keyword">if</span> (ans &lt; INT_MIN / <span class="number">10</span> || ans &gt; INT_MAX/<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ans=x/<span class="number">10</span>+p;</span><br><span class="line">        x=x/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="无重复的最长字符串（2024-07-06）"><a href="#无重复的最长字符串（2024-07-06）" class="headerlink" title="无重复的最长字符串（2024.07.06）"></a>无重复的最长字符串（2024.07.06）</h2><p>滑动窗口，左下标i，右下标j（界限为右边界），提取窗口内子串用<code>str.substr(i,j-i)</code><br>查找字符串中的某字符用<code>str.find</code> （找不到返回-1，一开始被gpt骗了，说是返回npos<br>发现字符重复后，清除重复字符以前的所有字符<br>注意字符串string和字符char不是同一种格式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">        string str;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>; j&lt; s.<span class="built_in">length</span>();j++)&#123;</span><br><span class="line">            str=s.<span class="built_in">substr</span>(i,j-i);</span><br><span class="line">            <span class="type">int</span> pos=str.<span class="built_in">find</span>(s[j]);</span><br><span class="line">            <span class="keyword">if</span> (pos != <span class="number">-1</span>)&#123;</span><br><span class="line">                str.<span class="built_in">erase</span>(<span class="number">0</span>,pos+<span class="number">1</span>);</span><br><span class="line">                i=i+pos+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            str +=s[j];</span><br><span class="line">            result=<span class="built_in">max</span>(result,j-i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>好不喜欢字符串…就是一种绝对能弄出来但不知道怎么更快的感觉<br>我还是喜欢不知道能不能弄出来，想大于做的任务</p><h2 id="两数相加（2024-07-06）"><a href="#两数相加（2024-07-06）" class="headerlink" title="两数相加（2024.07.06）"></a>两数相加（2024.07.06）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单向链表定义</span></span><br><span class="line"> <span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">     <span class="type">int</span> val;</span><br><span class="line">     ListNode *next;</span><br><span class="line">     <span class="built_in">ListNode</span>() : <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">     <span class="built_in">ListNode</span>(<span class="type">int</span> x) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">     <span class="built_in">ListNode</span>(<span class="type">int</span> x, ListNode *next) : <span class="built_in">val</span>(x), <span class="built_in">next</span>(next) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ListNode是结构体对象，节点存储的是指向下一节点的指针和节点的值。<br>l1,l2分别是指向链表头结点的指针<br>所以，头节点的值是<code>l1-&gt;val</code>，指向下一个节点的指针是<code>l1-&gt;next</code><br>引入滑动指针遍历整个链表，当前位数的值相加，超过十进位。<br><strong>滑动指针运算前需要判断非空!</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* p=l1;</span><br><span class="line">        ListNode* q=l2;</span><br><span class="line">        ListNode* head=<span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        ListNode* current=head;</span><br><span class="line">        ListNode* l3;</span><br><span class="line">        <span class="type">int</span> N1=<span class="number">0</span>,N2=<span class="number">0</span>,n1=<span class="number">0</span>,n2=<span class="number">0</span>,extra=<span class="number">0</span>,x,y;</span><br><span class="line">        <span class="keyword">while</span> (p!=<span class="literal">nullptr</span> || q!=<span class="literal">nullptr</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (p!=<span class="literal">nullptr</span>) x=p-&gt;val;</span><br><span class="line">            <span class="keyword">else</span> x=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (q!=<span class="literal">nullptr</span>) y=q-&gt;val;</span><br><span class="line">            <span class="keyword">else</span> y=<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> sum=x+y+extra;</span><br><span class="line">            extra=sum/<span class="number">10</span>;</span><br><span class="line">            current-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(sum%<span class="number">10</span>);</span><br><span class="line">            current=current-&gt;next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (p != <span class="literal">nullptr</span>) p = p-&gt;next;</span><br><span class="line">            <span class="keyword">if</span> (q != <span class="literal">nullptr</span>) q = q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (extra &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        current-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(extra);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l3=head-&gt;next;</span><br><span class="line"></span><br><span class="line">        &#125;        </span><br><span class="line"></span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><h2 id="两数之和（2024-07-05）"><a href="#两数之和（2024-07-05）" class="headerlink" title="两数之和（2024.07.05）"></a>两数之和（2024.07.05）</h2><p>我的答案，暴力循环：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>vector&lt;int&gt; 动态数组<br>++i是前置递增，i++是后置递增</p><p>官方答案，用到概念哈希表(hashtable)：<br>哈希表是一种数据结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; hashtable;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">auto</span> it = hashtable.<span class="built_in">find</span>(target - nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (it != hashtable.<span class="built_in">end</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;it-&gt;second, i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            hashtable[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>it-&gt;first是健，这里是数组的元素<br>it-&gt;second是值，这是是数组的索引。</p><h5 id="遇到的问题：运行代码时通过列表初始化vector出错"><a href="#遇到的问题：运行代码时通过列表初始化vector出错" class="headerlink" title="遇到的问题：运行代码时通过列表初始化vector出错"></a>遇到的问题：运行代码时通过列表初始化vector出错</h5><p>设置vs code支持c++11<br>改command adapter设置<br><a href="https://www.jianshu.com/p/e1bc046edecc">https://www.jianshu.com/p/e1bc046edecc</a><br>改code-runner配置<br><a href="https://blog.csdn.net/Littlelumos/article/details/130437532">https://blog.csdn.net/Littlelumos/article/details/130437532</a></p><p>可能是 mac 芯片&#x2F;系统 或者 code runner 参数问题，所以先找到 code runner 插件的配置设置，找到 cpp 文件的启动参数，下面省略：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">&quot;code-runner.executorMap&quot;:</span> &#123;</span><br><span class="line">  <span class="attr">&quot;javascript&quot;:</span> <span class="string">&quot;node&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;java&quot;:</span> <span class="string">&quot;cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;c&quot;:</span> <span class="string">&quot;cd $dir &amp;&amp; gcc $fileName -o -std=c++11 -g $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;zig&quot;:</span> <span class="string">&quot;zig run&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;cpp&quot;:</span> <span class="string">&quot;cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span>,</span><br></pre></td></tr></table></figure><p>将其中的 cpp (不是 c) 改成这样，加入 c++11 支持就可以了：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">&quot;cpp&quot;:</span> <span class="string">&quot;cd $dir &amp;&amp; g++ $fileName -g -Wall -std=c++11 -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="string">,</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/&quot;&gt;https://leetcode.cn/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;回文数（2024-07-12）&quot;&gt;&lt;a href=&quot;#回文数（2024-07-12）&quot; class=&quot;headerlink&quot; title=&quot;回文数（2024.07.12）&quot;&gt;&lt;/a&gt;回文数（2024.07.12）&lt;/h2&gt;&lt;p&gt;我想的笨办法，数字转成字符串，然后和反转后的字符串比较，都用现成的函数。&lt;/p&gt;</summary>
    
    
    
    
    <category term="cpp" scheme="https://boliulian.github.io/Boliulian/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+github部署个人博客的流程</title>
    <link href="https://boliulian.github.io/Boliulian/2024/07/04/Hexo+github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%B5%81%E7%A8%8B/"/>
    <id>https://boliulian.github.io/Boliulian/2024/07/04/Hexo+github%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%B5%81%E7%A8%8B/</id>
    <published>2024-07-04T14:16:04.000Z</published>
    <updated>2024-07-14T05:16:57.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-下载node-js和npm"><a href="#1-下载node-js和npm" class="headerlink" title="1.下载node.js和npm"></a>1.下载node.js和npm</h2><p>node.js包括了npm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><span id="more"></span>   <h2 id="2-下载hexo"><a href="#2-下载hexo" class="headerlink" title="2.下载hexo"></a>2.下载hexo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="3-初始化blog"><a href="#3-初始化blog" class="headerlink" title="3.初始化blog"></a>3.初始化blog</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog</span><br><span class="line">cd myblog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="4-安装主题"><a href="#4-安装主题" class="headerlink" title="4.安装主题"></a>4.安装主题</h2><h3 id="4-1-下载next"><a href="#4-1-下载next" class="headerlink" title="4.1 下载next"></a>4.1 下载next</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="4-2-配置-config-yml"><a href="#4-2-配置-config-yml" class="headerlink" title="4.2 配置_config.yml"></a>4.2 配置_config.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><h2 id="5-外部部署"><a href="#5-外部部署" class="headerlink" title="5.外部部署"></a>5.外部部署</h2><h3 id="5-1-github准备"><a href="#5-1-github准备" class="headerlink" title="5.1 github准备"></a>5.1 github准备</h3><p>github新建仓库<my_repository>，并将主分支设置为main</p><h3 id="5-2-本地准备"><a href="#5-2-本地准备" class="headerlink" title="5.2 本地准备"></a>5.2 本地准备</h3><p>安装插件hexo-deployer-git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>生成ssh key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot; &quot;</span><br><span class="line">git config --global user.email &quot; &quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot; &quot;</span><br></pre></td></tr></table></figure><p>将<code>id_rsa.pub</code>文件中的内容复制到仓库设置中，生成ssh key</p><h3 id="5-3-两者连接"><a href="#5-3-两者连接" class="headerlink" title="5.3 两者连接"></a>5.3 两者连接</h3><p>修改<code>\_config.yml</code>文件中的deploy和url</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">github</span> <span class="string">page地址</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">仓库的ssh地址（http地址连不上</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><h2 id="6-提交内容"><a href="#6-提交内容" class="headerlink" title="6.提交内容"></a>6.提交内容</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-下载node-js和npm&quot;&gt;&lt;a href=&quot;#1-下载node-js和npm&quot; class=&quot;headerlink&quot; title=&quot;1.下载node.js和npm&quot;&gt;&lt;/a&gt;1.下载node.js和npm&lt;/h2&gt;&lt;p&gt;node.js包括了npm&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="hexo" scheme="https://boliulian.github.io/Boliulian/tags/hexo/"/>
    
    <category term="github" scheme="https://boliulian.github.io/Boliulian/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>自欺欺人第一名</title>
    <link href="https://boliulian.github.io/Boliulian/2024/07/04/%E8%87%AA%E6%AC%BA%E6%AC%BA%E4%BA%BA%E7%AC%AC%E4%B8%80%E5%90%8D/"/>
    <id>https://boliulian.github.io/Boliulian/2024/07/04/%E8%87%AA%E6%AC%BA%E6%AC%BA%E4%BA%BA%E7%AC%AC%E4%B8%80%E5%90%8D/</id>
    <published>2024-07-04T10:33:46.000Z</published>
    <updated>2024-07-14T05:16:57.175Z</updated>
    
    <content type="html"><![CDATA[<p>比惨可耻但有用：</p><span id="more"></span>   <p>① 成果很好但毕业了半年才找到博后的<br><a href="http://xhslink.com/ywsCnO">点击比惨</a><br>② 6月毕业还没工作的，以及去年6月毕业还没工作的<br> <a href="http://xhslink.com/pHmmrO">点击比惨</a><br>③ 专业不对口也不是没可能转行的<br><a href="http://xhslink.com/qn4mrO">点击比惨</a><br>④24届没找到工作的集合<br><a href="http://xhslink.com/IKHFGO">点击比惨</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;比惨可耻但有用：&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>youtube-dl扒档方法</title>
    <link href="https://boliulian.github.io/Boliulian/2024/07/04/youtube-dl%E6%89%92%E6%A1%A3%E6%96%B9%E6%B3%95/"/>
    <id>https://boliulian.github.io/Boliulian/2024/07/04/youtube-dl%E6%89%92%E6%A1%A3%E6%96%B9%E6%B3%95/</id>
    <published>2024-07-04T10:16:04.000Z</published>
    <updated>2024-07-14T05:16:57.173Z</updated>
    
    <content type="html"><![CDATA[<p>好人提供的扒档教程，原链接：<a href="https://weibo.com/ttarticle/p/show?id=2309404603148240027963">https://weibo.com/ttarticle/p/show?id=2309404603148240027963</a></p><p><strong>方法是youtube-dl+ffmpeg</strong></p><span id="more"></span>   <p>youtube-dl从github找，用homebrew安装；ffmpeg是个可执行文件，从官网下</p><p>（我把ffmpeg放到usr&#x2F;local&#x2F;bin了</p><p>然后从原视频连接获取真实url，具体方法：</p><blockquote><p>在Tver或者Gyao点开一个视频，右键-审查元素（或直接Ctrl+Shift+I，如果发现不让审查元素，可以先点开随便一个别的网页，提前点开审查元素，然后把tver的链接粘贴即可）</p><p>Ctrl+f搜data-account，找到这个站点的数字</p><p>Ctrl+f搜data-video-id找到这个视频专属的数字</p><p>然后替换到底下这个链接里，即可<br><a href="http://players.brightcove.net/(data-account)/default_default/index.html?videoId=(data-video-id)">http://players.brightcove.net/(data-account)/default_default/index.html?videoId=(data-video-id)</a></p></blockquote><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -f bestvideo+bestaudio http://players.brightcove.net/4394098882001/default_default/index.html\?videoId\=\6356122004112</span><br><span class="line"></span><br><span class="line">神业</span><br><span class="line">youtube-dl -f bestvideo+bestaudio http://players.brightcove.net/4031511847001/default_default/index.html\?videoId\=\6356257443112</span><br><span class="line"></span><br><span class="line">新钥匙</span><br><span class="line">youtube-dl -f bestvideo+bestaudio http://players.brightcove.net/6191645753001/default_default/index.html\?videoId\=\6356789936112</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;好人提供的扒档教程，原链接：&lt;a href=&quot;https://weibo.com/ttarticle/p/show?id=2309404603148240027963&quot;&gt;https://weibo.com/ttarticle/p/show?id=2309404603148240027963&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法是youtube-dl+ffmpeg&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="工具" scheme="https://boliulian.github.io/Boliulian/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>精神自留地</title>
    <link href="https://boliulian.github.io/Boliulian/2024/07/03/%E7%B2%BE%E7%A5%9E%E8%87%AA%E7%95%99%E5%9C%B0/"/>
    <id>https://boliulian.github.io/Boliulian/2024/07/03/%E7%B2%BE%E7%A5%9E%E8%87%AA%E7%95%99%E5%9C%B0/</id>
    <published>2024-07-03T11:13:30.000Z</published>
    <updated>2024-07-14T05:16:57.176Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8ff2e61076e7b7d5538a1d98eca2b750d7b9dc13444ddfa3cd2f64d60fc16dcb">ca758192cd85358452d6f2f524abcef869a6b8fc9f48b798620917bf9438f09b7b239df395b9c7dec1e941e01f79a0eb637465e6bb0f70c86149f0cbdc2eda09963183dfad84ef38acbfdf08925a93fa6c2ee9893b76968c61b0c940d3b9ef5483dc1004531b2907c65dbe51c904b75346cb29e2d8fac4080e4f675ac191b1f8825096713f7f31319e75e3fa8e85640c2fee9768a495c8711169ac8358e4d3dd3c4e1a8a751c5077c956e44ee5fbfe65589a24e256921b17d99d6e29b4fed52d575d387e562018815f5a6920d88633e6db9389dc018dc8f1c349954b67fa95f454aa418cdd237683ec084e34f5eada256f6c4fad9e677f17ee8a8d6b231f0e8d24073326530a65df7b953f689cecaf6e51e3e0907daa7ef65923599b260199e9ac419d1734d097fbd28458566cf4d22090b1cde390fd858df4b864ffccbd3a7ba98b0b178ede486db7a625f9b94f574b609703ac3301bcdde4f13d2cf3a2ccfb68141e03217b525c7943a8ec3f323c0b5cb1b0b021bac0713aefedf6ab9e660bbe6ce110d89bea10ab52d0bc162f00cb12776774a8ed1d5d347dfdb7404dd4311ba477403680858c8de214bc558b3bd0f864542f0497418c8323946695792be067fa9f13f2683a6e988d3aaf4cb2d78676cb8d2f3b4f4588801604267b694db0e51c5791bb6eaaf73333d86213440a49159c522a1e6cf66de47021d24a3d3c807f19e1bbbed0fa02d55cf78f0d56b8fbd3a23376f9a4d58f54c96d73cb9dd38a25947b42949cb4e7d2353995ea8dccb4777f507300461340c43ea009bb48e7db3b6687a11e99856b8ccaaa1073c751e3ded1c9c72e7ca8b270d3a06531364027124cb498974f71d26f3fcb0648c5389159e8c5ea40c0e1f2fe4fb83d423ba5588bc7647d8f436ec52624c0e42975a1f3aabc982bf9e677438936817c1519fa39376951d86b5001cb7010aea49a714837e54f3a3a87af6c57daeaeb71beb96e00819e5b29a5ce314c41341bf45e94c6e8cac75573794d0eea14476ab07285430cb97fe84db87aa9d80da5b618929923bbc437fa22b99732c9f1227ed03085957c15bc8e5b9cefca7d6f77153668d75c4a4ade0a953457d6163793302975420885c300419c24145f86b6c716d02302e3095264d0c3b3c77be51b00b5dacf4ca0835c30b3e03e9f5ecdf16766d357f9d2d15c31f1b50559ab2fa229a6e07fc506ddfdc057726d2b23c4fb8241b6737b6424aab91b1065b73ec21df786108e71c419aae8565940e4216e8ea3b4c48b11c1858a7751b46ac700e6512da2bbe06ded11c055752a57ab86d68ee9a02b7ad7b9de75ad74456900831c67b27a0e37f41ed476b3da719c28b40bb79634c428a47b811add75a4db88b1326f980846e1a8497003c1a14f9664e3f0fc105598718153e93b25a245527b2876296cd693aa42fed508e9d22a1b776011933fbb4a385f28310c5134201675c0623891612e8038069348227e2b37e7f9544547ff48bd04512deef7ca1fe412b92f45e5741632997105ed1d47e3675580e0a8f8fbb71344b628896e77425e95e625b232aa8c8c5847f20f0f94a23823cb67aafb8b1c5d16e35eec2bc1ba57b2edbf5bec6ddaafdb55476311c5b106dda9fbd88a9684d90916f3e13afdab558dab343dcabf18775b81b8d5ca3718c542c7300295a43083b9e701888a029a8f9616beb1f3a2258b1ed85b83267bb5cac4e1e61cbc536f02a1498e132aca67097fff3da313cc7884bb4f4f828f72a877c1360aacb2fa119c149735858ed9d8cc59610595afef7e334c01896a673163cd518c3e37d550bbaba4e8b9a54a95028b2df7153569a75affe87adf10c89329908a5f4523fa8f790d0e4f76d317348b067232798ebe56ae93a9779d8ea9418c43ce4dcad27f5399152c96d7cc26b668ebbc8cd068b9cd933cd6e26f2a56afbddc5b6b60adc34a1b4ab034701280a3294e36a4eed5af16d4db4ea91eb97f49862f4df93cd08fb5a5baf24c08b776a3f5581619be55d5cdb29c22c2c4da38a881b6677bab54e0d54c6adeaf13898d077be8c7fb628d833b6087241eca32ce84f3dc2535c34f8ba8f6141fcf796e1cf01f93a96c66bc8de9598a46a55571af4501dec7d7333cbff967dfd43cf96a50c88c9843c46a351658de1b2932f3d687849cb3eb41708d6ee80f9985d5bb5e132989253ebffc788630a985e84880</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/Boliulian/lib/hbe.js"></script><link href="/Boliulian/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="灵魂会说话" scheme="https://boliulian.github.io/Boliulian/tags/%E7%81%B5%E9%AD%82%E4%BC%9A%E8%AF%B4%E8%AF%9D/"/>
    
  </entry>
  
</feed>
